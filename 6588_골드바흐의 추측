"""
문제 발상 자체는 어렵지 않았음
수를 입력 받았을 때, 그 수를 두 개의 "소수"로, 그 중에서도 두 수의 차가 가장 큰 경우를 골라서 출력하는 문제
결국 어떤 수가 소수인지를 판별하는 식을 만드는게 포인트임
그러나, 평범한 소수 판별(2부터 n-1까지 모두 나누어보기) 방식을 선택할 경우 시간 초과를 피할 수가 없었음
이후에 "에라토스테네스의 체"라는 알고리즘을 공부하게 된 후 다시 도전함
에라토스테네스의 체는 정해진 범위안의 모든 수에 대해서 각 수의 배수를 제거하여 소수 집합을 나타내는 알고리즘으로, 시간 복잡도가 O(Nlog2log2N)으로 사실상 O(N)에 가까움
단, 해당 알고리즘을 사용하였을때도 시간 초과가 발생했는데, 두 가지의 잘못된 경우의 수를 겪음
1. a를 입력받을때마다 2부터 a까지의 소수 집합을 생성하였음 - 문제 조건에서 테스트케이스는 최대 10만번까지 이므로, 각각의 시도에 대해 소수 집합을 새로 생성하는 것은 시간 초과
2. 처음부터 n=1,000,000에 대하여 소수 집합을 먼저 생성해놓은 후([False,False,True,True,False,True ...]), 집합을 하나 더 생성하여 소수를 '수'로서 표현한 리스트를 추가로 만듦([2,3,5,7 ...])
   이 때 각각의 리스트를 추가로 만드는 과정은 메모리와 시간을 낭비하는 방법임을 알게 됨
최종적으로 True or False 집합을 이용하여 각각의 while문에 대해서 두 수가 소수인지 판별하는 알고리즘을 완성했음
"""

import math

prime=[]
list1=[]
list2=[]

n=1000000

array=[True for i in range(n+1)]
array[0]=False
array[1]=False
for i in range(2, int(math.sqrt(n)+1)):
	j=2
	while i*j<=n:
		array[i*j]=False
		j+=1

while True:
	a=int(input())

	if a==0:
		break

	for i in range(a+1):
		x=i
		y=a-i
		if array[x] and array[y]:
			list1.append(a)
			list2.append(x)
			break

for i in range(len(list1)):
	a=list1[i]
	b=list2[i]
	print(a,'=',b,'+',a-b)
