"""
강연료를 최대한 많이 받아야 하지만, 데드라인을 넘기게 되면 강연을 할 수 없다.
문제를 해결하려면 데드라인이 적은 것 부터 파악해가며 그 중 강연료가 가장 높은 것을 채워 넣는다.
데드라인이 적은 입력부터 계속해서 추가하는 중 입력된 강연의 개수(= 리스트의 len)가 데드라인보다 크다면, 추가된 강연들 중
강연료가 가장 적은 것을 빼고 그 강연을 추가한다.
이를 heap구조를 통해 구현할 수 있다.

이 문제의 경우 알고리즘은 비슷하게 떠올렸지만 결국 알고리즘의 완성과 구현은 80%이상 다른 사람의 코드를 참고했다.
반드시 숙지하여 비슷한 유형의 문제에 대해 적용할 수 있도록 하자.

참고:https://velog.io/@bye9/%EB%B0%B1%EC%A4%80%ED%8C%8C%EC%9D%B4%EC%8D%AC-2109-%EC%88%9C%ED%9A%8C%EA%B0%95%EC%97%B0
"""




import heapq

n=int(input())
data=[]
for i in range(n):
	data.append(list(map(int, input().split())))
data=sorted(data, key=lambda x:x[1])

"""
d가 낮은 입력부터 계속해서 넣는데, 수가 더 크면, 그리고 d를 벗어나면
강연료 중 최소값을 빼고 그 수를 넣음
여기서 heap의 정의(최소 힙: 루트 노드가 가장 작은 값을 가지며, 따라서 값이 작은 데이터가 우선적으로 제거된다)로 인해 최소값은 heap의 맨 위의 부모 노드이며,
따라서 heappop을 통해 이를 구현할 수 있음
"""

heap=[]
for i in data:
	heapq.heappush(heap, i[0])
	if len(heap)>i[1]:
		heapq.heappop(heap)
sum=0
for i in heap:
	sum+=i
print(sum)
