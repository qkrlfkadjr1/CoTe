"""
이전에 풀어봤던 유형을 통해 문제풀이 알고리즘을 빠르게 유추할 수 있었음.
이 문제는 처음 보았을 때 바로 이해하지 못했는데, 결국 여러가지 센서에 대해서 
정해진 갯수의 원(직선)을 사용해서 각각의 센서를 최소한의 원의 범위 안에 넣어두는 것이다.
이를 간단하게 정리해보면, 각각의 센서들 중 특히 이웃과의 사이가 먼 친구들을 기준으로 원의 범위를 잘라서, 최소화 하자는 것이며
이를 코드로 나타내면 된다.

단, 집중국의 개수가 센서보다 같거나 커지는 순간 각 센서마다 집중국을 최소한 하나씩 둘 수 있으며, 이렇게 되는 경우 각 좌표마다
원을 둘 수 있게 되면서 원의 반지름이 0이 되어도(점이 되어도) 센서를 가동시킬 수 있다.
따라서 k>=n이 되는 경우를 따로 빼서 예외 사항으로 만들어야 런타임 에러를 피할 수 있다.
"""
n=int(input())
k=int(input())
if n<=k:
	co=list(map(int,input().split()))
	print(0)
else:
	co=list(map(int,input().split()))
	co=list(set(co))
	co.sort()
	dif=[]
	for i in range(len(co)-1):
		dif.append(co[i+1]-co[i])
	dif.sort()
	dif.reverse()
	ans=co[-1]-co[0]
	for i in range(k-1):
		ans-=dif[i]
	print(ans)
