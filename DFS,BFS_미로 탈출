#상하좌우로 연결된 경우 하나의 덩어리로 처리
#상하좌우 관계식, dfs or bfs 사용
#(1,1)부터 (n,m)까지 각 좌표마다 함수 적용 (visited와 동일한 작동, 각 덩어리마다 count 셀 것)
# *dfx(x,y)에서, x축이 행이고 y축이 열이 되어야 한다. 임의로 바꿀 순 없으며, 바꾸려면 모든 변수 고려해서 잘 바꿔야 함

#input().split()은 띄어쓰기로 구분할 때만 쓴다.


from collections import deque

n,m=map(int,input().split())

x,y=(0,0)


dx=[-1,0,1,0]
dy=[0,-1,0,1]

graph=[]
for i in range(n):
	graph.append(list(map(int,input())))

def bfs(x,y):
	queue=deque()
	queue.append((x,y))

	#큐가 빌 때까지
	while queue:
		x,y=queue.popleft()
		for i in range(4):
			nx=x+dx[i]
			ny=y+dy[i]

			if nx<0 or ny<0 or nx>=n or ny>=m:
				continue
			if graph[nx][ny]==0:
				continue

			if graph[nx][ny]==1:
				graph[nx][ny]=graph[x][y]+1
				queue.append((nx,ny))

	return graph[n-1][m-1]

print(bfs(0,0))
