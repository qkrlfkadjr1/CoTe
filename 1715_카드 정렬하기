"""
알고리즘은 떠올렸으나, heapq가 아직 익숙치 못해 구현중 연등시간이 거의 끝남
지금 생각중인 알고리즘은, heap에 입력받은 수들을 모두 넣고,
작은 수들부터 줄여나가면서 그 둘의 합을 구해서 sum에 더하고, 그 합을 또 heap에 넣는다.
끝날떄까지 반복하는데, 끝나는 경우는 heap이 비는 경우라 생각했지만 index오류가남 2021-09-02

###
이틀 후 오늘 이어서 문제 풀이
떠올렸던 알고리즘 그대로, 위에서부터 차근차근 따라가면서 코드를 읽어본 결과
c가 비는 조건을 c==False가 아닌, len(c)==0으로 바꾸었으며, 이에 따라 99% 정답에 도달할 수 있었음.
마지막 하나의 테스트케이스는 n이 1인 경우로, n이 1일 때에는 이미 정렬된 카드 묶음 하나를 정렬하는 데 필요한 정렬 확인 횟수이므로
확인할 필요가 없다, 즉 0을 출력해야 한다는 조건을 따로 추가해야함.
문풀 정답 코드는 맨 밑에 있음.

+++ 참고 0, 혼자만의 힘으로 푼 문제

import heapq
n=int(input())
data=[]
for i in range(n):
	data.append(int(input()))
data.sort()
c=[]
for i in range(n):
	heapq.heappush(c, data[i])
sum=0

while True:
	value=0
	if c is False:
		break
	value+=heapq.heappop(c)
	print(value)
	print(c)
	if c is False:
		break
	value+=heapq.heappop(c)
	print(value)
	print(c)
	sum+=value
	heapq.heappush(c,value)
	if c is False:
		break

print(sum)


"""


import heapq
n=int(input())
data=[]
for i in range(n):
	data.append(int(input()))
data.sort()
c=[]
for i in range(n):
	heapq.heappush(c, data[i])
sum=0

while True:
	if n==1:
		print(0)
		break
	value=0
	value+=heapq.heappop(c)
	if len(c)==0:
		sum+=value

	value+=heapq.heappop(c)
	if len(c)==0:
		sum+=value
		break
	sum+=value
	heapq.heappush(c,value)
	if c is False:
		break

if n!=1:
	print(sum)
