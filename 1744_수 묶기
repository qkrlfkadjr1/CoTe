n=int(input())
minus=[]
zero=[]
one=[]
plus=[]
for _ in range(n):
	a=int(input())
	if a<0:
		minus.append(a)
	elif a>1:
		plus.append(a)
	elif a==0:
		zero.append(a)
	else:
		one.append(a)
minus.sort()
plus.sort()
plus.reverse()
ans=0
if len(minus)%2==1:
	if len(zero)!=0:
		minus.append(0)
	else:
		minus.append(1)
if len(plus)%2==1:
	plus.insert(-1,1)
for i in range(0,len(minus),2):
	ans+=minus[i]*minus[i+1]
ans+=sum(one)
for i in range(0,len(plus),2):
	ans+=plus[i]*plus[i+1]
print(ans)


"""
차근차근히 매 분기점을 나누어서 알고리즘을 짜면 해결할 수 있는 문제이다.
먼저, 수의 합이 최대가 되려면 음수끼리는 최대한 큰것부터 묶어서 부호가 양수가 되면서 동시에 곱이 최대가 되도록 만들어야 하며,
0과 1은 곱하지 않고 그대로 더해야 하고,
양수는 최대한 큰수끼리 두개씩 곱해서 최대가 되도록 해야 한다.
따라서 입력값이 음수인지, 0인지, 1인지, 1보다 큰지에 따라서 각각의 리스트(총 4개)에 따로 담는다.
또한, 양수리스트가 홀수라면 마지막숫자는 그대로 더해야하므로 인덱스오류를 방지하기위해 1을 추가하여 마지막숫자*1=마지막숫자로 계산되도록 설계한다.
음수리스트의 경우 양수리스트와 거의 동일하지만, 만약 입력된값중 0이 하나라도 있을 경우 마지막음수에 0을 곱하여 없애버릴 수 있으므로 이에 따른 분기점도 고려한다.

반례를 통해 음수리스트와 0의 관계를 알아내는 것을 빼면 모두 스스로 풀어낸 문제이다.
"""
