"""
내가 생각한 알고리즘은,
입력받은 주가들을 내림차순으로 정렬하여 주가의 최대값을 미리 파악해둔 후,
앞에서부터 검토하면서 최대값이 나온다면 count*max - 지금까지 사둔 총 주식금액 만큼을 이익에 더한다.
이후 최대값은 최대값 리스트 중 다음 인덱스의 값 (2번째 최대값)으로 갱신해 준 후 반복한다.
예제 3개에는 모두 정답이 적용되었지만 8%의 테스트케이스를 넘지 못하였고, 시간이 오래걸리는 것을 확인하였다.
내가 작성한 코드는 다음과 같다.
import sys
input=sys.stdin.readline
t=int(input())
for _ in range(t):
	surplus=0
	stack=0
	count=0
	n=int(input())
	cost=list(map(int, input().split()))
	max_cost=sorted(cost)
	max_cost.reverse()
	j=0
	max=max_cost[j]
	for i in cost:
		if i == max:
			surplus+=count*max-stack
			count=0
			stack=0
			j+=1
			if j==len(max_cost):
				break
			else:
				max=max_cost[j]
		else:
			stack+=i
			count+=1
	print(surplus)
  
  
+++
이 문제의 해결방안은, 뒤에서부터 확인하는 것이다.
뒤에서부터 탐색하면서, 최대값이 나올때마다 갱신하며 
현재 탐색중인 값이 현재 가지고 있는 최대값보다 작다면 그 차익만큼을 이익에 더해주기만 하면 된다.
이를 따라 구현한 답안은 다음과 같다.
"""

import sys
input=sys.stdin.readline
t=int(input())
for _ in range(t):
	money=0
	n=int(input())
	cost=list(map(int, input().split()))
	cost.reverse()
	max=cost[0]
	for i in range(1,n):
		if max<cost[i]:
			max=cost[i]
		else:
			money+=max-cost[i]
	print(money)
