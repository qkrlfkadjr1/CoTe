"""
처음 생각한 알고리즘은, 각각의 입력값을 정렬한 후 완전탐색을 통해 카운팅이 최대가 될 경우를 구하는 것이었다.
물론, 시간복잡도가O(n^2)이 되어버려 시간 초과 판정이 났다.

import sys
input=sys.stdin.readline

n=int(input())
a=[]
ans=0
for i in range(n):
	a.append(list(map(int, input().split())))
a=sorted(a, key=lambda x: x[1])
a=sorted(a, key=lambda x: x[0])
for i in range(n-1):
	count=1
	standard=a[i][1]
	for j in range(i+1,n):
		check=a[j][0]
		if check>=standard:
			count+=1
			standard=a[j][1]
	ans=max(ans, count)
print(ans)

완전탐색이 안될 경우 어떻게 해야 할지 생각해보았다.
시작시간이 가장 빠른 것 중 끝나는 시간이 가장 빠른 것을 계속해서 고르면 어떻게 될까?
이런 경우에는 주어진 입력값이 1 1000000, 2 3, 6 8, 9 10과 같은 경우에서 올바른 값을 얻지 못한다.

결국 문제를 결정 짓는 것은 끝나는 시간이다.
따라서, 끝나는 시간이 가장 빠른 것 중 시작 시간이 앞선 회의의 끝나는 시간보다 크거나 같으면서도 가장 작은 경우를 계속해서 골라보자.
구현해보면 다음과 같다.
"""

import sys
input=sys.stdin.readline

n=int(input())
a=[]
for i in range(n):
	a.append(list(map(int, input().split())))
a=sorted(a, key=lambda x: x[0])
a=sorted(a, key=lambda x: x[1])

count=1
standard=a[0][1]
for i in range(1,n):
	if a[i][0]>=standard:
		standard=a[i][1]
		count+=1
print(count)
